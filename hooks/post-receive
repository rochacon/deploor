#!/usr/bin/env python
import os
import subprocess
import sys
import tempfile

from fabric.colors import cyan, green

from .utils import abort, get_environment, parse_git_ref


if __name__ == '__main__':
    # Remove GIT_DIR of os.environ, if present
    if 'GIT_DIR' in os.environ:
        os.environ.pop('GIT_DIR')

    # Get repostiory path
    pwd = os.getcwd()
    environment = get_environment(pwd)

    # Read values from stdin
    oldrev, newrev, git_ref = sys.stdin.read().split()

    # Parse git_ref being pushed
    ref_type, ref_name = parse_git_ref(git_ref)

    # Get a temp directoy and clone this repo in there
    clone = tempfile.mkdtemp(prefix='clone')
    io, iofile = tempfile.mkstemp(prefix='clonelog')
    os.chdir(clone)
    try:
        subprocess.check_call(['git', 'clone', pwd, '.'], stdout=io, stderr=subprocess.STDOUT)
    except subprocess.CalledProcessError, e:
        abort('Error cloning the repo. Return code: {0}'.format(e.returncode), 3)

    try:
        subprocess.check_call(['git', 'checkout', ref_name], stdout=io, stderr=subprocess.STDOUT)
    except subprocess.CalledProcessError, e:
        print str(e)
        abort('Error checking out the given reference. Return code: {0}'.format(e.returncode), 4)

    print '--- Deploying {0} to {1}'.format(green(ref_name), cyan(environment))
    try:
        subprocess.check_call(['fab', environment, 'deploy:"{0}"'.format(ref_name)], stdout=io, stderr=subprocess.STDOUT)
    except subprocess.CalledProcessError, e:
        abort('Error on deployment. Return code: {0}'.format(e.returncode), 5)

