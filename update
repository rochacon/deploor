#!/usr/bin/env python
"""
FIXME this still dont work. The cloned repository doesnt have the
pushed changes yet
"""
import os
import shutil
import subprocess
import sys
import tempfile

from fabric.colors import cyan, green, red


def abort(message, code, clone=None):
    print red(message)
    if clone is not None:
        shutil.rmtree(clone)
    sys.exit(code)


def parse_git_ref(git_ref):
    """
    Return the reference type and name
    Example:
        refs/head/master -> branch, master
        refs/tags/1.0 -> tags, 1.0
    """
    ref = git_ref.split('/')
    if len(ref) < 3:
        raise ValueError('invalid ref string')

    # Otherwise, return the branch name
    ref_type = 'branch' if ref[1] == 'head' else ref[1]
    return ref_type, ref[2]


if __name__ == '__main__':
    # Remove GIT_DIR of os.environ, if present
    if 'GIT_DIR' in os.environ:
        os.environ.pop('GIT_DIR')

    # Get environment based on bare path
    pwd = os.getcwd()
    environment = pwd.split('/')[-2]
    if environment not in ('dev', 'staging', 'production'):
        abort('Unknown environment: {0}'.format(environment), 2)

    # Parse git_ref being pushed
    ref_type, ref_name = parse_git_ref(sys.argv[1])

    # Production only deploys tags
    if environment == 'production' and ref_type != 'tags':
        abort('Only tags can be deployed to production', 1)

    # Get a temp directoy and clone this repo in there
    clone = tempfile.mkdtemp(prefix='clone')
    io, iofile = tempfile.mkstemp(prefix='clonelog')
    os.chdir(clone)
    try:
        subprocess.check_call(['git', 'clone', pwd, '.'], stdout=io, stderr=subprocess.STDOUT)
    except subprocess.CalledProcessError, e:
        abort('Error cloning the repo. Return code: {0}'.format(e.returncode), 3)

    try:
        subprocess.check_call(['git', 'checkout', ref_name], stdout=io, stderr=subprocess.STDOUT)
    except subprocess.CalledProcessError, e:
        abort('Error checking out the given reference. Return code: {0}'.format(e.returncode), 4)

    print '--- Deploying {0} to {1}'.format(green(ref_name), cyan(environment))
    try:
        subprocess.check_call(['fab', environment, 'deploy:"{0}"'.format(ref_name)], stdout=io, stderr=subprocess.STDOUT)
    except subprocess.CalledProcessError, e:
        abort('Error on deployment. Return code: {0}'.format(e.returncode), 5)
